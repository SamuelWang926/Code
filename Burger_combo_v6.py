"""Burger combo program use to store a quick menu of combo meals v6
Make the program generated by graphical user interface (GUI) and some advance
Created by Qingxiao
"""
# pylint: disable = W0621, W0612, C0103, C0206

import easygui # Import GUI library

combos = {
         "Value": {
             "Combo name": "Value",
             "Combo items": [
                 {"Item": "Beef burger", "Price": 5.69},
                 {"Item": "Fries", "Price": 1.00},
                 {"Item": "Fizzy drink", "Price": 1.00}
             ]
         },
         "Cheezy": {
             "Combo name": "Cheezy",
             "Combo items": [
                 {"Item": "Cheeseburger", "Price": 6.69},
                 {"Item": "Fries", "Price": 1.00},
                 {"Item": "Fizzy drink", "Price": 1.00}
             ]
         },
         "Super": {
             "Combo name": "Super",
             "Combo items": [
                 {"Item": "Cheeseburger", "Price": 6.69},
                 {"Item": "Large fries", "Price": 2.00},
                 {"Item": "Smoothie", "Price": 2.00}
             ]
         }
     }

all_items = {
    "Beef burger": 5.69,
    "Fries": 1.00,
    "Fizzy drink": 1.00,
    "Cheeseburger": 6.69,
    "Large fries": 2.00,
    "Smoothie": 2.00
}

def add_combo():
    # Show all available items
    items = [f"{name} (${price:.2f})" for name, price in all_items.items()]
    while True:
        # Get the name of the combo
        combo_name_input = easygui.enterbox("Enter combo name:")
        if combo_name_input is None:
            return
        # Make sure it is exist or not
        combo_name = combo_name_input.strip().title()
        if not combo_name:
            return
        if combo_name in combos:
            if not easygui.ynbox(f"Combo {combo_name} exists! Overwrite?"):
                continue
        # Multiple choice
        selected = easygui.multchoicebox("Select items:", choices=items)
        if selected is None:
            return
        if not selected:
            easygui.msgbox("Must select at least 1 item!", "Error")
            continue
        # Create a list of selected items
        selected_items = []
        for s in selected:
            item_name = s.split(" ($")[0]
            selected_items.append({
                "Item": item_name,
                "Price": all_items[item_name]
            })
        # Create a message for confirmation
        msg = f"Confirm new combo: {combo_name}\n\nItems:"
        for item in selected_items:
            msg += f"\n- {item['Item']} (${item['Price']:.2f})"
        total = sum(i["Price"] for i in selected_items)
        msg += f"\n\nTotal: ${total:.2f}"

        if easygui.buttonbox(msg, choices=("Confirm", "Cancel")) == "Confirm":
            combos[combo_name] = {
                "Combo name": combo_name,
                "Combo items": selected_items
            }
        break

def find_combo():
    """Find combo meal based on user input"""
    search_term_input = easygui.enterbox(
        "Enter combo name to search:", "Find Combo").strip().title() # Find combo based on input
    if search_term_input is None:
        return
    search_term = search_term_input.strip().title()

    found = [combo for combo in combos.values()
             if combo["Combo name"].lower() == search_term.lower()]

    if not found: # Error message if no combo found
        easygui.msgbox(f"No combo found with name: {search_term}", "Search Result")
        return

    result = []
    for combo in found:
        items = "\n".join(
            [f"• {item['Item']} (${item['Price']:.2f})"
             for item in combo["Combo items"]])
        total = sum(item["Price"] for item in combo["Combo items"])
        result.append(
            f"Combo Name: {combo['Combo name']}\n"
            f"Includes:\n{items}\n"
            f"Total Price: ${total:.2f}\n"
            f"{'-'*40}"
        )

    easygui.msgbox("\n".join(result), "Combo Details")

def delete_combo():
    """Delete a combo meal from the dictionary"""
    if not combos:
        easygui.msgbox("No combos available to delete", "Delete Combo")
        return

    combo_names = sorted(combos.keys())
    selected = easygui.choicebox("Select combo to delete:", "Delete Combo", combo_names)
    if not selected:
        return

    target = combos[selected] # Save combo for deletion
    items = "\n".join(
        [f"• {item['Item']} (${item['Price']:.2f})"
         for item in target["Combo items"]])
    total = sum(item["Price"] for item in target["Combo items"])

    confirm_msg = (
        f"Confirm deletion of:\n"
        f"Combo Name: {selected}\n"
        f"Items:\n{items}\n"
        f"Total Price: ${total:.2f}"
    ) # Output the target combo for confirmation
    # Ask for confirmation before deletion
    if easygui.buttonbox(confirm_msg, choices=["Confirm Delete", "Cancel"]) == "Confirm Delete":
        del combos[selected]
        easygui.msgbox(f"Combo '{selected}' deleted successfully", "Deletion Complete")
    else:
        easygui.msgbox("Deletion cancelled", "Operation Cancelled")


def output_all():
    """Output all available combos"""
    if not combos:
        easygui.msgbox("No combos available", "Combo List")
        return

    display = ["All Available Combos:\n"]
    for name in sorted(combos.keys()):
        details = combos[name]
        items = "\n".join(
            [f"• {item['Item']} (${item['Price']:.2f})"
             for item in details["Combo items"]])# Create a string of items
        total = sum(item["Price"] for item in details["Combo items"])# Calculate total price
        display.append(
            f"Combo Name: {name}\n"
            f"Items:\n{items}\n"
            f"Total Price: ${total:.2f}\n"
            f"{'-'*50}"
        )

    full_content = "\n".join(display)
    easygui.textbox(full_content, "Complete Combo List", full_content)
#main routine
choice = ""
while True:
    choice = easygui.buttonbox(
        "Main Menu",
        choices=["Add Combo", "Find Combo", "Delete Combo",
                "Show All Combos", "Exit"]
    )
    if choice == "Exit":
        easygui.msgbox("Thank you for using Burger Combo Manager!")
        break
    elif choice == "Add Combo":
        add_combo()
    elif choice == "Find Combo":
        find_combo()
    elif choice == "Delete Combo":
        delete_combo()
    elif choice == "Show All Combos":
        output_all()
